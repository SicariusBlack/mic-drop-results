[PROGRAM]
  # update_check <0 or 1>: enable update check
    update_check = 1

  # avatar_mode <0 or 1>: enable user avatars on slides
    avatar_mode = 1

  # avatar_resolution <int>: higher resolution takes more time to download
    ;   available presets: 16, 32, 40, 60, 64, 80, 100, 128, 512, 1024
    avatar_resolution = 80


[DATA]
  # sorting_orders <list of 0's and 1's>: the sorting orders of the first N
    ;                                     columns where N is the length of
    ;                                     the sorting_orders list
    ;
    ;       0 – smaller value gets better rank (usually for std)
    ;       1 – greater value gets better rank (usually for avg)
    ;
    ;   for example: if the columns are
    ;                "avg", "tie_breaker_1", "tie_breaker_2", "unrelated_col"
    ;
    ;                and sorting_orders
    ;                (1, 0, 1)
    ;
    ;                the rank will be determined by the first three columns,
    ;
    ;                where the GREATEST value of "avg" places first,
    ;                      the SMALLEST value of "tie_breaker_1" wins the tie,
    ;                  and the GREATEST value of "tie_breaker_2" wins the
    ;                second tie. Because sorting_orders = (1, 0, 1)
    sorting_orders = (1, 0)


[FORMATTING]
  # trigger_word <string>: {field_names} beginning with the trigger word will
    ;                      apply conditional formatting to numeric values
    ;
    ;   for example: if the trigger word is "score", formatting will take effect
    ;                on {score1}, {score2}, and {score_avg}, but not {avg}
    trigger_word = score

  # ranges <list of numbers in ascending order>: the segment points to determine
    ;                                            conditional formatting ranges
    ;
    ;   for example: (a, b, c, d) will segment the score values into ranges
    ;                [a, b); [b, c); [c, d); and d+
    ;                where range [x, y) includes x but excludes y
    ranges = (0, 4, 9, 10)

  # scheme, scheme_alt <list of hex values>: the colors in each scheme will be
    ;                                        matched to the corresponding ranges
    ;                                        determined earlier
    scheme = (EA9999, FFFFFF, 93C47D, FFD966)
    scheme_alt = (DF4141, 000000, 0A700A, FFFF28)
