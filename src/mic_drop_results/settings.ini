[PROGRAM]
  # update_check <0 or 1>: enable update check
    update_check = 1

  # avatar_mode <0 or 1>: enable user avatars on slides
    avatar_mode = 1


  # avatar_resolution <integer>: higher resolution means better quality but more
    ;                            time it takes to download and process avatars
    ; * available resolutions:
    ;       16, 32, 64, 80, 100, 128, 256, 512, 1024, 2048
    ;  ————————————————————
    avatar_resolution = 80


[DATA]
  # sort_orders <list of 0's and 1's>: the sort orders of the first N columns,
    ;                                  where N is the length of sort_orders list
    ; * available sort orders:
    ;       0 – smaller value gets higher rank (usually for std)
    ;       1 – greater value gets higher rank (usually for avg)
    ;
    ; * for example:
    ;       if the columns are
    ;       "avg", "tie_breaker_1", "tie_breaker_2", "unrelated_col"
    ;       and sort_orders = (1, 0, 1)
    ;
    ;       the rank will be determined by the first three columns,
    ;       where the GREATEST value of "avg" places first,
    ;             the SMALLEST value of "tie_breaker_1" wins the tie,
    ;         and the GREATEST value of "tie_breaker_2" wins the second tie
    ;  ————————————————————
    sort_orders = (1, 0)


[FORMATTING]
  # trigger_word <text>: {field_names} that begin with the trigger word will
    ;                    apply conditional formatting to numbers
    ; * for example:
    ;       if the trigger word is "score", formatting will take effect on
    ;       {score1}, {score2}, and {score_avg}, but not on {avg}
    ;  ————————————————————
    trigger_word = score


  # ranges <list of numbers in ascending order>: the segment points to determine
    ;                                            conditional formatting ranges
    ; * for example:
    ;       (a, b, c, d) will segment the score values into ranges
    ;           [a, b); [b, c); [c, d); and d+
    ;       where range [x, y) includes x but excludes y
    ;  ————————————————————
    ranges = (0, 4, 9, 10)


  # scheme, scheme_alt <list of hex color codes>: the colors in each scheme will
    ;                                             be matched correspondingly to
    ;                                             the ranges determined earlier
    ; * note:
    ;       the alternative scheme can be activated by adding a coefficient of 1
    ;       after a {field} from template.pptm
    ;           for example: {score2}1
    ;
    ;       this is useful when you want to include a dark theme and a light
    ;       theme for your template
    ;  ————————————————————
    scheme = (ea9999, ffffff, 93c47d, ffd966)
    scheme_alt = (df4141, 000000, 0a700a, ffff28)
