[PROGRAM]
  # update_check <0 or 1>:  0 to disable update checks
    update_check = 1

  # avatar_mode <0 or 1>:  0 to turn off avatar mode
    avatar_mode = 1


  # avatar_resolution:  higher resolution means better image quality but more time it takes to
    ;                   download and process avatars
    ; * available resolutions:
    ;       16, 32, 64, 80, 100, 128, 256, 512, 1024, 2048
    ;  ————————————————————
    avatar_resolution = 80


[DATA]
  # sort_orders <list of 0/1>:  list of sort orders for the first N columns (called
    ;                           "sorting columns"), where N is the length of the list
    ; * available sort orders:
    ;       0 – lesser value gets higher rank (usually for std)
    ;       1 – higher value gets higher rank (usually for avg)
    ;
    ; * for example:
    ;       if the columns are "avg",  "tie_breaker_1",  "tie_breaker_2",  and "unrelated_column"
    ;       and sort_orders =   [1,           0,                1]
    ;
    ;       the rank will be determined by the first three columns,
    ;       where the GREATEST value of "avg" places first,
    ;             the SMALLEST value of "tie_breaker_1" wins the tie,
    ;         and the GREATEST value of "tie_breaker_2" wins the second tie
    ;  ————————————————————
    sort_orders = [1, 0]


[FORMATTING]
  # trigger_word <text>:  field names beginning with the trigger word apply conditional formatting
    ;                     to numbers
    ; * for example:
    ;       if the trigger word is "score", conditional formatting will take effect on
    ;       {score1}, {score2}, and {score_avg}, but not on {name} or {avg}
    ;  ————————————————————
    trigger_word = "score"


  # ranges <list of numbers in ascending order>:  list of anchor points to determine conditional
    ;                                             formatting ranges
    ; * for example:
    ;       ranges = [0, 4, 9, 10] will segment the scores into ranges:
    ;           [0, 4); [4, 9); [9, 10); and 10+
    ;  ————————————————————
    ranges = [0, 4, 9, 10]


  # scheme, scheme_alt <list of hex color codes>:  the colors will be matched correspondingly to
    ;                                              the aforementioned ranges
    ; * note:
    ;       the alternative scheme is activated by adding a coefficient of 1 after the {field}
    ;       in template.pptm.  For example: write {score2}1 instead of {score2} for the alt scheme
    ;  ————————————————————
    scheme = [ea9999, ffffff, 93c47d, ffd966]
    scheme_alt = [df4141, 000000, 0a700a, ffff28]
