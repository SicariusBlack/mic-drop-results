[PROGRAM]
  # update_check <0 or 1>: enable update check
    update_check = 1

  # avatar_mode <0 or 1>: enable user avatars on slides
    avatar_mode = 1

  # avatar_resolution <int>: higher resolution means better quality and longer
    ;                        time it takes to download
    ; * available presets: 16, 32, 40, 60, 64, 80, 100, 128, 512, 1024
    avatar_resolution = 80


[DATA]
  # sort_orders <list of 0's and 1's>: the sort orders of the first N columns
    ;                                  (called the sorting columns), where N is
    ;                                  the length of the sort_orders list
    ;
    ; * available list values:
    ;       0 – smaller value gets better rank (usually for std)
    ;       1 – greater value gets better rank (usually for avg)
    ;
    ; * for example: if the columns are
    ;                "avg", "tie_breaker_1", "tie_breaker_2", "unrelated_col"
    ;
    ;                and sort_orders =
    ;                (1, 0, 1)
    ;
    ;                the rank will be determined by the first three columns,
    ;
    ;                where the GREATEST value of "avg" places first,
    ;                      the SMALLEST value of "tie_breaker_1" wins the tie,
    ;                  and the GREATEST value of "tie_breaker_2" wins the second
    ;                tie. Because sort_orders = (1, 0, 1)
    sort_orders = (1, 0)


[FORMATTING]
  # trigger_word <string>: {field_names} that begin with the trigger word will
    ;                      apply conditional formatting to numbers
    ;
    ; * for example: if the trigger word is "score", formatting will take effect
    ;                on {score1}, {score2}, and {score_avg}, but not {avg}
    trigger_word = score

  # ranges <list of numbers in ascending order>: the segment points to determine
    ;                                            conditional formatting ranges
    ;
    ; * for example: (a, b, c, d) will segment the score values into ranges
    ;                [a, b); [b, c); [c, d); and d+
    ;                where range [x, y) includes x but excludes y
    ranges = (0, 4, 9, 10)

  # scheme, scheme_alt <list of hex color codes>: the colors in each scheme will
    ;                                             be matched correspondingly to
    ;                                             the ranges determined earlier
    scheme = (ea9999, ffffff, 93c47d, ffd966)
    scheme_alt = (df4141, 000000, 0a700a, ffff28)
